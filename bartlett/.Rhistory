Method = c(rep("QuasiSeq",l),rep("QuasiSeqBart",l),rep("SAMseq",l),
rep("EdgeR",l),rep("DESeq2",l),rep("Voom",l)),
Simulation = rep("SimSeq", l*6),
SS = rep("Sample Size: 20",l*6))
fdp <- rbind(fdp1,fdp2,fdp3,fdp4,fdp5,fdp6)
fdp$Method <- as.factor(fdp$Method)
fdp$Simulation <- as.factor(fdp$Simulation)
fdp$SS <- as.factor(fdp$SS)
p <- ggplot(data = fdp)
p + geom_line(aes(x = cuts, y = fdp, colour = Simulation), size = 0.5, linetype = 11) +
geom_ribbon(aes(x = cuts, ymax = fdp + 1.96 * sderr, colour = Simulation, fill = Simulation,
ymin = fdp - 1.96 * sderr), alpha = 0.3, size = 0.5) +
scale_y_continuous(breaks = c(-0.05,0,0.05,0.1,0.15)) +
scale_x_continuous(breaks = c(0,0.05,0.10)) +
#   scale_colour_manual(values = c("red", "blue")) +
#   scale_fill_manual(values = c("red", "blue")) +
geom_hline(yintercept = 0, colour = "gold", size = 1, linetype = "dashed") +
theme_bw() + facet_grid(SS ~ Method) +
theme(axis.text.x = element_text(angle=90)) +
xlab("Q-value Cutoff") + ylab("(Average FDP) - (Q-Value Cutoff)")
require(ggplot2)
cuts <- seq(0,0.15,by = 0.001)
l <- length(cuts)
n <- 200
mainDir <- getwd()
subDir <- "fdp_output"
k.ind <- 5
fdp.deseq <- readRDS(file.path(mainDir, subDir, paste0("ss", k.ind), "fdp_deseq2_cooks_simseq.RDS"))
fdp.spline <- readRDS(file.path(mainDir, subDir, paste0("ss", k.ind), "fdp_quasiseq_cooks_simseq.RDS"))
fdp.spline.bart <- readRDS(file.path(mainDir, subDir, paste0("ss", k.ind), "fdp_quasiseq_cooks_simseq_bart.RDS"))
fdp.edgeR <- readRDS(file.path(mainDir, subDir, paste0("ss", k.ind), "fdp_edger_cooks_simseq.RDS"))
fdp.samseq <- readRDS(file.path(mainDir, subDir, paste0("ss", k.ind), "fdp_samseq_cooks_simseq.RDS"))
fdp.voom <- readRDS(file.path(mainDir, subDir, paste0("ss", k.ind), "fdp_voom_cooks_simseq.RDS"))
fdp1 <- data.frame(fdp = c(rowMeans(fdp.spline),rowMeans(fdp.spline.bart),rowMeans(fdp.samseq),
rowMeans(fdp.edgeR),rowMeans(fdp.deseq),rowMeans(fdp.voom)),
sderr = c(apply(fdp.spline, 1, sd)/sqrt(n),apply(fdp.spline.bart, 1, sd)/sqrt(n), apply(fdp.samseq, 1, sd)/sqrt(n),
apply(fdp.edgeR, 1, sd)/sqrt(n), apply(fdp.deseq, 1, sd)/sqrt(n),
apply(fdp.voom, 1, sd)/sqrt(n)),
cuts = rep(cuts,6),
Method = c(rep("QuasiSeq",l),rep("QuasiSeqBart",l),rep("SAMseq",l),
rep("EdgeR",l),rep("DESeq2",l), rep("Voom",l)),
Simulation = rep("SimSeq", l*6),
SS = rep("Sample Size: 5", l*6))
fdp.deseq <- readRDS(file.path(mainDir, subDir, paste0("ss", k.ind), "fdp_deseq2_cooks_nb.RDS"))
fdp.spline <- readRDS(file.path(mainDir, subDir, paste0("ss", k.ind), "fdp_quasiseq_cooks_nb.RDS"))
fdp.spline.bart <- readRDS(file.path(mainDir, subDir, paste0("ss", k.ind), "fdp_quasiseq_cooks_nb_bart.RDS"))
fdp.edgeR <- readRDS(file.path(mainDir, subDir, paste0("ss", k.ind), "fdp_edger_cooks_nb.RDS"))
fdp.samseq <- readRDS(file.path(mainDir, subDir, paste0("ss", k.ind), "fdp_samseq_cooks_nb.RDS"))
fdp.voom <- readRDS(file.path(mainDir, subDir, paste0("ss", k.ind), "fdp_voom_cooks_nb.RDS"))
fdp2 <- data.frame(fdp = c(rowMeans(fdp.spline),rowMeans(fdp.spline.bart),rowMeans(fdp.samseq),
rowMeans(fdp.edgeR),rowMeans(fdp.deseq),rowMeans(fdp.voom)),
sderr = c(apply(fdp.spline, 1, sd)/sqrt(n),apply(fdp.spline.bart, 1, sd)/sqrt(n), apply(fdp.samseq, 1, sd)/sqrt(n),
apply(fdp.edgeR, 1, sd)/sqrt(n), apply(fdp.deseq, 1, sd)/sqrt(n),
apply(fdp.voom, 1, sd)/sqrt(n)),
cuts = rep(cuts,6),
Method = c(rep("QuasiSeq",l),rep("QuasiSeqBart",l),rep("SAMseq",l),
rep("EdgeR",l),rep("DESeq2",l),rep("Voom",l)),
Simulation = rep("NegBin", l*6),
SS = rep("Sample Size: 5",l*6))
k.ind <- 10
fdp.deseq <- readRDS(file.path(mainDir, subDir, paste0("ss", k.ind), "fdp_deseq2_cooks_nb.RDS"))
fdp.spline <- readRDS(file.path(mainDir, subDir, paste0("ss", k.ind), "fdp_quasiseq_cooks_nb.RDS"))
fdp.spline.bart <- readRDS(file.path(mainDir, subDir, paste0("ss", k.ind), "fdp_quasiseq_cooks_nb_bart.RDS"))
fdp.edgeR <- readRDS(file.path(mainDir, subDir, paste0("ss", k.ind), "fdp_edger_cooks_nb.RDS"))
fdp.samseq <- readRDS(file.path(mainDir, subDir, paste0("ss", k.ind), "fdp_samseq_cooks_nb.RDS"))
fdp.voom <- readRDS(file.path(mainDir, subDir, paste0("ss", k.ind), "fdp_voom_cooks_nb.RDS"))
fdp3 <- data.frame(fdp = c(rowMeans(fdp.spline),rowMeans(fdp.spline.bart),rowMeans(fdp.samseq),
rowMeans(fdp.edgeR),rowMeans(fdp.deseq),rowMeans(fdp.voom)),
sderr = c(apply(fdp.spline, 1, sd)/sqrt(n),apply(fdp.spline.bart, 1, sd)/sqrt(n), apply(fdp.samseq, 1, sd)/sqrt(n),
apply(fdp.edgeR, 1, sd)/sqrt(n), apply(fdp.deseq, 1, sd)/sqrt(n),
apply(fdp.voom, 1, sd)/sqrt(n)),
cuts = rep(cuts,6),
Method = c(rep("QuasiSeq",l),rep("QuasiSeqBart",l),rep("SAMseq",l),
rep("EdgeR",l),rep("DESeq2",l),rep("Voom",l)),
Simulation = rep("NegBin", l*6),
SS = rep("Sample Size: 10",l*6))
fdp.deseq <- readRDS(file.path(mainDir, subDir, paste0("ss", k.ind), "fdp_deseq2_cooks_simseq.RDS"))
fdp.spline <- readRDS(file.path(mainDir, subDir, paste0("ss", k.ind), "fdp_quasiseq_cooks_simseq.RDS"))
fdp.spline.bart <- readRDS(file.path(mainDir, subDir, paste0("ss", k.ind), "fdp_quasiseq_cooks_simseq_bart.RDS"))
fdp.edgeR <- readRDS(file.path(mainDir, subDir, paste0("ss", k.ind), "fdp_edger_cooks_simseq.RDS"))
fdp.samseq <- readRDS(file.path(mainDir, subDir, paste0("ss", k.ind), "fdp_samseq_cooks_simseq.RDS"))
fdp.voom <- readRDS(file.path(mainDir, subDir, paste0("ss", k.ind), "fdp_voom_cooks_simseq.RDS"))
fdp4 <- data.frame(fdp = c(rowMeans(fdp.spline),rowMeans(fdp.spline.bart),rowMeans(fdp.samseq),
rowMeans(fdp.edgeR),rowMeans(fdp.deseq),rowMeans(fdp.voom)),
sderr = c(apply(fdp.spline, 1, sd)/sqrt(n),apply(fdp.spline.bart, 1, sd)/sqrt(n), apply(fdp.samseq, 1, sd)/sqrt(n),
apply(fdp.edgeR, 1, sd)/sqrt(n), apply(fdp.deseq, 1, sd)/sqrt(n),
apply(fdp.voom, 1, sd)/sqrt(n)),
cuts = rep(cuts,6),
Method = c(rep("QuasiSeq",l),rep("QuasiSeqBart",l),rep("SAMseq",l),
rep("EdgeR",l),rep("DESeq2",l),rep("Voom",l)),
Simulation = rep("SimSeq", l*6),
SS = rep("Sample Size: 10",l*6))
k.ind <- 10
fdp.deseq <- readRDS(file.path(mainDir, subDir, paste0("ss", k.ind), "fdp_deseq2_cooks_nb.RDS"))
fdp.spline <- readRDS(file.path(mainDir, subDir, paste0("ss", k.ind), "fdp_quasiseq_cooks_nb.RDS"))
fdp.spline.bart <- readRDS(file.path(mainDir, subDir, paste0("ss", k.ind), "fdp_quasiseq_cooks_nb_bart.RDS"))
fdp.edgeR <- readRDS(file.path(mainDir, subDir, paste0("ss", k.ind), "fdp_edger_cooks_nb.RDS"))
fdp.samseq <- readRDS(file.path(mainDir, subDir, paste0("ss", k.ind), "fdp_samseq_cooks_nb.RDS"))
fdp.voom <- readRDS(file.path(mainDir, subDir, paste0("ss", k.ind), "fdp_voom_cooks_nb.RDS"))
fdp5 <- data.frame(fdp = c(rowMeans(fdp.spline),rowMeans(fdp.spline.bart),rowMeans(fdp.samseq),
rowMeans(fdp.edgeR),rowMeans(fdp.deseq),rowMeans(fdp.voom)),
sderr = c(apply(fdp.spline, 1, sd)/sqrt(n),apply(fdp.spline.bart, 1, sd)/sqrt(n), apply(fdp.samseq, 1, sd)/sqrt(n),
apply(fdp.edgeR, 1, sd)/sqrt(n), apply(fdp.deseq, 1, sd)/sqrt(n),
apply(fdp.voom, 1, sd)/sqrt(n)),
cuts = rep(cuts,6),
Method = c(rep("QuasiSeq",l),rep("QuasiSeqBart",l),rep("SAMseq",l),
rep("EdgeR",l),rep("DESeq2",l),rep("Voom",l)),
Simulation = rep("NegBin", l*6),
SS = rep("Sample Size: 20",l*6))
fdp.deseq <- readRDS(file.path(mainDir, subDir, paste0("ss", k.ind), "fdp_deseq2_cooks_simseq.RDS"))
fdp.spline <- readRDS(file.path(mainDir, subDir, paste0("ss", k.ind), "fdp_quasiseq_cooks_simseq.RDS"))
fdp.spline.bart <- readRDS(file.path(mainDir, subDir, paste0("ss", k.ind), "fdp_quasiseq_cooks_simseq_bart.RDS"))
fdp.edgeR <- readRDS(file.path(mainDir, subDir, paste0("ss", k.ind), "fdp_edger_cooks_simseq.RDS"))
fdp.samseq <- readRDS(file.path(mainDir, subDir, paste0("ss", k.ind), "fdp_samseq_cooks_simseq.RDS"))
fdp.voom <- readRDS(file.path(mainDir, subDir, paste0("ss", k.ind), "fdp_voom_cooks_simseq.RDS"))
fdp6 <- data.frame(fdp = c(rowMeans(fdp.spline),rowMeans(fdp.spline.bart),rowMeans(fdp.samseq),
rowMeans(fdp.edgeR),rowMeans(fdp.deseq),rowMeans(fdp.voom)),
sderr = c(apply(fdp.spline, 1, sd)/sqrt(n),apply(fdp.spline.bart, 1, sd)/sqrt(n), apply(fdp.samseq, 1, sd)/sqrt(n),
apply(fdp.edgeR, 1, sd)/sqrt(n), apply(fdp.deseq, 1, sd)/sqrt(n),
apply(fdp.voom, 1, sd)/sqrt(n)),
cuts = rep(cuts,6),
Method = c(rep("QuasiSeq",l),rep("QuasiSeqBart",l),rep("SAMseq",l),
rep("EdgeR",l),rep("DESeq2",l),rep("Voom",l)),
Simulation = rep("SimSeq", l*6),
SS = rep("Sample Size: 20",l*6))
fdp <- rbind(fdp1,fdp2,fdp3,fdp4,fdp5,fdp6)
fdp$Method <- as.factor(fdp$Method)
fdp$Simulation <- as.factor(fdp$Simulation)
fdp$SS <- as.factor(fdp$SS)
p <- ggplot(data = fdp)
p + geom_line(aes(x = cuts, y = fdp, colour = Simulation), size = 0.5, linetype = 11) +
geom_ribbon(aes(x = cuts, ymax = fdp + 1.96 * sderr, colour = Simulation, fill = Simulation,
ymin = fdp - 1.96 * sderr), alpha = 0.3, size = 0.5) +
scale_y_continuous(breaks = c(-0.05,0,0.05,0.1,0.15)) +
scale_x_continuous(breaks = c(0,0.05,0.10)) +
#   scale_colour_manual(values = c("red", "blue")) +
#   scale_fill_manual(values = c("red", "blue")) +
geom_hline(yintercept = 0, colour = "gold", size = 1, linetype = "dashed") +
theme_bw() + facet_grid(SS ~ Method) +
theme(axis.text.x = element_text(angle=90)) +
xlab("Q-value Cutoff") + ylab("(Average FDP) - (Q-Value Cutoff)")
### Load CRAN packages
require(ggplot2)
###Non-Cooks analysis
QuantThresh <- function(pvals, null.genes, specificity){
quantile(pvals[null.genes], specificity)
}
k.ind <- 5
source("benchmarks_quant.R")
num.deseq2.simseq <- apply(pvals.deseq2.simseq, 1, QuantThresh, null.genes, 0.05)
num.edger.simseq <- apply(pvals.edger.simseq, 1, QuantThresh, null.genes, 0.05)
num.quasiseq.simseq <- apply(pvals.quasiseq.simseq, 1, QuantThresh, null.genes, 0.05)
num.quasiseq.simseq.bart <- apply(pvals.quasiseq.simseq.bart, 1, QuantThresh, null.genes, 0.05)
num.samseq.simseq <- apply(pvals.samseq.simseq, 1, QuantThresh, null.genes, 0.05)
num.voom.simseq <- apply(pvals.voom.simseq, 1, QuantThresh, null.genes, 0.05)
num.deseq2.nb <- apply(pvals.deseq2.nb, 1, QuantThresh, null.genes, 0.05)
num.edger.nb <- apply(pvals.edger.nb, 1, QuantThresh, null.genes, 0.05)
num.quasiseq.nb <- apply(pvals.quasiseq.nb, 1, QuantThresh, null.genes, 0.05)
num.quasiseq.nb.bart <- apply(pvals.quasiseq.nb.bart, 1, QuantThresh, null.genes, 0.05)
num.samseq.nb <- apply(pvals.samseq.nb, 1, QuantThresh, null.genes, 0.05)
num.voom.nb <- apply(pvals.voom.nb, 1, QuantThresh, null.genes, 0.05)
l <- length(num.deseq2.simseq)
num1 <- data.frame(num = c(num.deseq2.simseq, num.edger.simseq, num.quasiseq.simseq, num.quasiseq.simseq.bart,num.samseq.simseq, num.voom.simseq),
Method = as.factor(c(rep("DESeq2", l), rep("EdgeR", l),
rep("QuasiSeq", l), rep("QuasiSeqBart", l),rep("SAMseq", l),rep("Voom", l))),
Simulation = rep("SimSeq", l*6),
SS = rep("Sample Size: 5",l*6))
l <- length(num.deseq2.nb)
num2 <- data.frame(num = c(num.deseq2.nb, num.edger.nb, num.quasiseq.nb, num.quasiseq.nb.bart,num.samseq.nb, num.voom.nb),
Method = as.factor(c(rep("DESeq2", l), rep("EdgeR", l),
rep("QuasiSeq", l), rep("QuasiSeqBart", l),rep("SAMseq", l),rep("Voom", l))),
Simulation = rep("NB", l*6),
SS = rep("Sample Size: 5",l*6))
k.ind <- 10
source("benchmarks_quant.R")
num.deseq2.simseq <- apply(pvals.deseq2.simseq, 1, QuantThresh, null.genes, 0.05)
num.edger.simseq <- apply(pvals.edger.simseq, 1, QuantThresh, null.genes, 0.05)
num.quasiseq.simseq <- apply(pvals.quasiseq.simseq, 1, QuantThresh, null.genes, 0.05)
num.quasiseq.simseq.bart <- apply(pvals.quasiseq.simseq.bart, 1, QuantThresh, null.genes, 0.05)
num.samseq.simseq <- apply(pvals.samseq.simseq, 1, QuantThresh, null.genes, 0.05)
num.voom.simseq <- apply(pvals.voom.simseq, 1, QuantThresh, null.genes, 0.05)
num.deseq2.nb <- apply(pvals.deseq2.nb, 1, QuantThresh, null.genes, 0.05)
num.edger.nb <- apply(pvals.edger.nb, 1, QuantThresh, null.genes, 0.05)
num.quasiseq.nb <- apply(pvals.quasiseq.nb, 1, QuantThresh, null.genes, 0.05)
num.quasiseq.nb.bart <- apply(pvals.quasiseq.nb.bart, 1, QuantThresh, null.genes, 0.05)
num.samseq.nb <- apply(pvals.samseq.nb, 1, QuantThresh, null.genes, 0.05)
num.voom.nb <- apply(pvals.voom.nb, 1, QuantThresh, null.genes, 0.05)
l <- length(num.deseq2.simseq)
num3 <- data.frame(num = c(num.deseq2.simseq, num.edger.simseq, num.quasiseq.simseq, num.quasiseq.simseq.bart,num.samseq.simseq, num.voom.simseq),
Method = as.factor(c(rep("DESeq2", l), rep("EdgeR", l),
rep("QuasiSeq", l), rep("QuasiSeqBart", l),rep("SAMseq", l),rep("Voom", l))),
Simulation = rep("SimSeq", l*6),
SS = rep("Sample Size: 10",l*6))
l <- length(num.deseq2.nb)
num4 <- data.frame(num = c(num.deseq2.nb, num.edger.nb, num.quasiseq.nb, num.quasiseq.nb.bart,num.samseq.nb, num.voom.nb),
Method = as.factor(c(rep("DESeq2", l), rep("EdgeR", l),
rep("QuasiSeq", l), rep("QuasiSeqBart", l),rep("SAMseq", l),rep("Voom", l))),
Simulation = rep("NB", l*6),
SS = rep("Sample Size: 10",l*6))
k.ind <- 20
source("benchmarks_quant.R")
num.deseq2.simseq <- apply(pvals.deseq2.simseq, 1, QuantThresh, null.genes, 0.05)
num.edger.simseq <- apply(pvals.edger.simseq, 1, QuantThresh, null.genes, 0.05)
num.quasiseq.simseq <- apply(pvals.quasiseq.simseq, 1, QuantThresh, null.genes, 0.05)
num.quasiseq.simseq.bart <- apply(pvals.quasiseq.simseq.bart, 1, QuantThresh, null.genes, 0.05)
num.samseq.simseq <- apply(pvals.samseq.simseq, 1, QuantThresh, null.genes, 0.05)
num.voom.simseq <- apply(pvals.voom.simseq, 1, QuantThresh, null.genes, 0.05)
num.deseq2.nb <- apply(pvals.deseq2.nb, 1, QuantThresh, null.genes, 0.05)
num.edger.nb <- apply(pvals.edger.nb, 1, QuantThresh, null.genes, 0.05)
num.quasiseq.nb <- apply(pvals.quasiseq.nb, 1, QuantThresh, null.genes, 0.05)
num.quasiseq.nb.bart <- apply(pvals.quasiseq.nb.bart, 1, QuantThresh, null.genes, 0.05)
num.samseq.nb <- apply(pvals.samseq.nb, 1, QuantThresh, null.genes, 0.05)
num.voom.nb <- apply(pvals.voom.nb, 1, QuantThresh, null.genes, 0.05)
l <- length(num.deseq2.simseq)
num5 <- data.frame(num = c(num.deseq2.simseq, num.edger.simseq, num.quasiseq.simseq, num.quasiseq.simseq.bart,num.samseq.simseq, num.voom.simseq),
Method = as.factor(c(rep("DESeq2", l), rep("EdgeR", l),
rep("QuasiSeq", l), rep("QuasiSeqBart", l),rep("SAMseq", l),rep("Voom", l))),
Simulation = rep("SimSeq", l*6),
SS = rep("Sample Size: 20",l*6))
l <- length(num.deseq2.nb)
num6 <- data.frame(num = c(num.deseq2.nb, num.edger.nb, num.quasiseq.nb, num.quasiseq.nb.bart,num.samseq.nb, num.voom.nb),
Method = as.factor(c(rep("DESeq2", l), rep("EdgeR", l),
rep("QuasiSeq", l),rep("QuasiSeqBart", l), rep("SAMseq", l),rep("Voom", l))),
Simulation = rep("NB", l*6),
SS = rep("Sample Size: 20",l*6))
num <- rbind(num1, num2, num3, num4, num5, num6)
qplot(Simulation, num, data = num, geom = "boxplot", facets = SS ~ Method,
ylab = "0.05 Quantile of p-values from null genes") + theme_bw()+
theme(axis.text.x = element_text(angle=90))
### Cook's Filtering
QuantThreshCooks <- function(pvals, filt, null.genes, specificity, pvals.list = FALSE)
{
if(pvals.list){
n.iter <- length(pvals)
} else {
n.iter <- nrow(pvals)
}
res <- rep(NA, n.iter)
for(i in 1:n.iter)
{
if(pvals.list){
pvals.temp <- pvals[[i]]
} else {
pvals.temp <- pvals[i, ][filt[i, ]]
}
null.genes.temp <- null.genes[filt[i, ]]
res[i] <- QuantThresh(pvals.temp, null.genes.temp, specificity)
}
return(res)
}
### Cooks Analysis
k.ind <- 5
source("benchmarks_quant.R")
num.deseq2.simseq <- QuantThreshCooks(pvals.deseq2.cooks.simseq, filt.cooks.simseq, null.genes, specificity = 0.05, pvals.list = TRUE)
num.edger.simseq <- QuantThreshCooks(pvals.edger.cooks.simseq, filt.cooks.simseq, null.genes, specificity = 0.05, pvals.list = TRUE)
num.quasiseq.simseq <- QuantThreshCooks(pvals.quasiseq.cooks.simseq, filt.cooks.simseq, null.genes, specificity = 0.05, pvals.list = TRUE)
num.quasiseq.simseq.bart <- QuantThreshCooks(pvals.quasiseq.cooks.simseq.bart, filt.cooks.simseq, null.genes, specificity = 0.05, pvals.list = TRUE)
num.samseq.simseq <- QuantThreshCooks(pvals.samseq.cooks.simseq, filt.cooks.simseq, null.genes, specificity = 0.05, pvals.list = TRUE)
num.voom.simseq <- QuantThreshCooks(pvals.voom.cooks.simseq, filt.cooks.simseq, null.genes, specificity = 0.05, pvals.list = TRUE)
num.deseq2.nb <- QuantThreshCooks(pvals.deseq2.cooks.nb, filt.cooks.nb, null.genes, specificity = 0.05, pvals.list = TRUE)
num.edger.nb <- QuantThreshCooks(pvals.edger.cooks.nb, filt.cooks.nb, null.genes, specificity = 0.05, pvals.list = TRUE)
num.quasiseq.nb <- QuantThreshCooks(pvals.quasiseq.cooks.nb, filt.cooks.nb, null.genes, specificity = 0.05, pvals.list = TRUE)
num.quasiseq.nb.bart <- QuantThreshCooks(pvals.quasiseq.cooks.nb.bart, filt.cooks.nb, null.genes, specificity = 0.05, pvals.list = TRUE)
num.samseq.nb <- QuantThreshCooks(pvals.samseq.cooks.nb, filt.cooks.nb, null.genes, specificity = 0.05, pvals.list = TRUE)
num.voom.nb <- QuantThreshCooks(pvals.voom.cooks.nb, filt.cooks.nb, null.genes, specificity = 0.05, pvals.list = TRUE)
l <- length(num.deseq2.simseq)
num1 <- data.frame(num = c(num.deseq2.simseq, num.edger.simseq, num.quasiseq.simseq,num.quasiseq.simseq.bart, num.samseq.simseq, num.voom.simseq),
Method = as.factor(c(rep("DESeq2", l), rep("EdgeR", l),
rep("QuasiSeq", l),rep("QuasiSeqBart", l), rep("SAMseq", l),rep("Voom", l))),
Simulation = rep("SimSeq", l*6),
SS = rep("Sample Size: 5",l*6))
l <- length(num.deseq2.nb)
num2 <- data.frame(num = c(num.deseq2.nb, num.edger.nb, num.quasiseq.nb,num.quasiseq.nb.bart, num.samseq.nb, num.voom.nb),
Method = as.factor(c(rep("DESeq2", l), rep("EdgeR", l),
rep("QuasiSeq", l),rep("QuasiSeqBart", l), rep("SAMseq", l),rep("Voom", l))),
Simulation = rep("NB", l*6),
SS = rep("Sample Size: 5",l*6))
k.ind <- 10
source("benchmarks_quant.R")
num.deseq2.simseq <- QuantThreshCooks(pvals.deseq2.simseq, filt.cooks.simseq, null.genes, specificity = 0.05, pvals.list = FALSE)
num.edger.simseq <- QuantThreshCooks(pvals.edger.simseq, filt.cooks.simseq, null.genes, specificity = 0.05, pvals.list = FALSE)
num.quasiseq.simseq <- QuantThreshCooks(pvals.quasiseq.simseq, filt.cooks.simseq, null.genes, specificity = 0.05, pvals.list = FALSE)
num.quasiseq.simseq.bart <- QuantThreshCooks(pvals.quasiseq.simseq.bart, filt.cooks.simseq, null.genes, specificity = 0.05, pvals.list = FALSE)
num.samseq.simseq <- QuantThreshCooks(pvals.samseq.simseq, filt.cooks.simseq, null.genes, specificity = 0.05, pvals.list = FALSE)
num.voom.simseq <- QuantThreshCooks(pvals.voom.simseq, filt.cooks.simseq, null.genes, specificity = 0.05, pvals.list = FALSE)
num.deseq2.nb <- QuantThreshCooks(pvals.deseq2.nb, filt.cooks.nb, null.genes, specificity = 0.05, pvals.list = FALSE)
num.edger.nb <- QuantThreshCooks(pvals.edger.nb, filt.cooks.nb, null.genes, specificity = 0.05, pvals.list = FALSE)
num.quasiseq.nb <- QuantThreshCooks(pvals.quasiseq.nb, filt.cooks.nb, null.genes, specificity = 0.05, pvals.list = FALSE)
num.quasiseq.nb.bart <- QuantThreshCooks(pvals.quasiseq.nb.bart, filt.cooks.nb, null.genes, specificity = 0.05, pvals.list = FALSE)
num.samseq.nb <- QuantThreshCooks(pvals.samseq.nb, filt.cooks.nb, null.genes, specificity = 0.05, pvals.list = FALSE)
num.voom.nb <- QuantThreshCooks(pvals.voom.nb, filt.cooks.nb, null.genes, specificity = 0.05, pvals.list = FALSE)
l <- length(num.deseq2.simseq)
num3 <- data.frame(num = c(num.deseq2.simseq, num.edger.simseq, num.quasiseq.simseq,num.quasiseq.simseq.bart, num.samseq.simseq, num.voom.simseq),
Method = as.factor(c(rep("DESeq2", l), rep("EdgeR", l),
rep("QuasiSeq", l),rep("QuasiSeqBart", l), rep("SAMseq", l),rep("Voom", l))),
Simulation = rep("SimSeq", l*6),
SS = rep("Sample Size: 10",l*6))
l <- length(num.deseq2.nb)
num4 <- data.frame(num = c(num.deseq2.nb, num.edger.nb, num.quasiseq.nb, num.quasiseq.nb.bart,num.samseq.nb, num.voom.nb),
Method = as.factor(c(rep("DESeq2", l), rep("EdgeR", l),
rep("QuasiSeq", l),rep("QuasiSeqBart", l), rep("SAMseq", l),rep("Voom", l))),
Simulation = rep("NB", l*6),
SS = rep("Sample Size: 10",l*6))
k.ind <- 20
source("benchmarks_quant.R")
num.deseq2.simseq <- QuantThreshCooks(pvals.deseq2.simseq, filt.cooks.simseq, null.genes, specificity = 0.05, pvals.list = FALSE)
num.edger.simseq <- QuantThreshCooks(pvals.edger.simseq, filt.cooks.simseq, null.genes, specificity = 0.05, pvals.list = FALSE)
num.quasiseq.simseq <- QuantThreshCooks(pvals.quasiseq.simseq, filt.cooks.simseq, null.genes, specificity = 0.05, pvals.list = FALSE)
num.quasiseq.simseq.bart <- QuantThreshCooks(pvals.quasiseq.simseq.bart, filt.cooks.simseq, null.genes, specificity = 0.05, pvals.list = FALSE)
num.samseq.simseq <- QuantThreshCooks(pvals.samseq.simseq, filt.cooks.simseq, null.genes, specificity = 0.05, pvals.list = FALSE)
num.voom.simseq <- QuantThreshCooks(pvals.voom.simseq, filt.cooks.simseq, null.genes, specificity = 0.05, pvals.list = FALSE)
num.deseq2.nb <- QuantThreshCooks(pvals.deseq2.nb, filt.cooks.nb, null.genes, specificity = 0.05, pvals.list = FALSE)
num.edger.nb <- QuantThreshCooks(pvals.edger.nb, filt.cooks.nb, null.genes, specificity = 0.05, pvals.list = FALSE)
num.quasiseq.nb <- QuantThreshCooks(pvals.quasiseq.nb, filt.cooks.nb, null.genes, specificity = 0.05, pvals.list = FALSE)
num.quasiseq.nb.bart <- QuantThreshCooks(pvals.quasiseq.nb.bart, filt.cooks.nb, null.genes, specificity = 0.05, pvals.list = FALSE)
num.samseq.nb <- QuantThreshCooks(pvals.samseq.nb, filt.cooks.nb, null.genes, specificity = 0.05, pvals.list = FALSE)
num.voom.nb <- QuantThreshCooks(pvals.voom.nb, filt.cooks.nb, null.genes, specificity = 0.05, pvals.list = FALSE)
l <- length(num.deseq2.simseq)
num5 <- data.frame(num = c(num.deseq2.simseq, num.edger.simseq, num.quasiseq.simseq, num.quasiseq.simseq.bart,num.samseq.simseq, num.voom.simseq),
Method = as.factor(c(rep("DESeq2", l), rep("EdgeR", l),
rep("QuasiSeq", l),rep("QuasiSeqBart", l), rep("SAMseq", l),rep("Voom", l))),
Simulation = rep("SimSeq", l*6),
SS = rep("Sample Size: 20",l*6))
l <- length(num.deseq2.nb)
num6 <- data.frame(num = c(num.deseq2.nb, num.edger.nb, num.quasiseq.nb,num.quasiseq.nb.bart, num.samseq.nb, num.voom.nb),
Method = as.factor(c(rep("DESeq2", l), rep("EdgeR", l),
rep("QuasiSeq", l),rep("QuasiSeqBart", l), rep("SAMseq", l),rep("Voom", l))),
Simulation = rep("NB", l*6),
SS = rep("Sample Size: 20",l*6))
num <- rbind(num1, num2, num3, num4, num5, num6)
qplot(Simulation, num, data = num, geom = "boxplot", facets = SS ~ Method,
ylab = "0.05 Quantile of p-values from null genes") + theme_bw()+
theme(axis.text.x = element_text(angle=90))
citation('QuasiSeq')
getwd()
setwd('C:/Users/Klirk/Desktop/Simulation_Code/Simulation_Code/KIRC_Simulations/bartlett/')
ls()
save.image('temporary.RData')
rm(list=ls())
### Load Bioconductor Packages
require(DESeq2)
require(edgeR)
require(limma)
### Load CRAN Packages
require(QuasiSeq)
require(samr)
require(fdrtool)
require(SimSeq)
### Set seed
version
set.seed(1039245)
### Set simulation variables
n.iter <- 200     # Number of iterations
k.ind <- 10    # Sample size in each simulated treatment group
n.genes <- 8500  # No of genes in each simulated matrix
n.diff <- 2000   # No of DE genes in each simulated matrix
n.genes.trim <- 5000 # No of genes to trim down to
n.diff.trim <- 1000 # No of DE genes to trim down to
filter.mean <- 10 # lower bound of average read count for simulated genes
filter.nonzero <- 2 # lower bound for nonzero read counts for simulated genes
### Load Data
data(kidney)
counts <- kidney$counts
tumor <- kidney$treatment
replic <- kidney$replic
### Remove low count genes
keep.counts <- ( rowMeans(counts) >= filter.mean ) & ( rowSums(counts > 0) >= filter.nonzero )
counts <- counts[keep.counts, ]
### Preprocessing Steps to speed up SimData function from SimSeq package
### Compute normalization factors to use in SimData function
### Effective library size is product of library size and size factors
### from calcNormFactors
k.ind <- 5    # Sample size in each simulated treatment group
n.genes <- 8500  # No of genes in each simulated matrix
n.diff <- 2000   # No of DE genes in each simulated matrix
n.genes.trim <- 5000 # No of genes to trim down to
n.diff.trim <- 1000 # No of DE genes to trim down to
filter.mean <- 10 # lower bound of average read count for simulated genes
filter.nonzero <- 2 # lower bound for nonzero read counts for simulated genes
### Load Data
data(kidney)
counts <- kidney$counts
tumor <- kidney$treatment
replic <- kidney$replic
### Remove low count genes
keep.counts <- ( rowMeans(counts) >= filter.mean ) & ( rowSums(counts > 0) >= filter.nonzero )
counts <- counts[keep.counts, ]
### Preprocessing Steps to speed up SimData function from SimSeq package
### Compute normalization factors to use in SimData function
### Effective library size is product of library size and size factors
### from calcNormFactors
lib.sizes <- apply(counts, 2, sum)
nf <- calcNormFactors(counts) * lib.sizes
### Compute weights to sample DE genes in SimData function
probs <- CalcPvalWilcox(counts, treatment = tumor, replic = replic,
sort.method = "paired", sorted = TRUE, nf,
exact = FALSE)
wghts <- 1 - fdrtool(probs, statistic = "pvalue", plot = FALSE, verbose = FALSE)$lfdr
### Initialize matrix of p-value output for each statistical method
pvals.samseq.simseq <- matrix(NA, nrow = n.iter, ncol = n.genes.trim)
pvals.quasiseq.simseq <- matrix(NA, nrow = n.iter, ncol = n.genes.trim)
pvals.quasiseq.simseq.bart <- matrix(NA, nrow = n.iter, ncol = n.genes.trim)
pvals.edger.simseq <- matrix(NA, nrow = n.iter, ncol = n.genes.trim)
pvals.deseq2.simseq <- matrix(NA, nrow = n.iter, ncol = n.genes.trim)
pvals.voom.simseq <- matrix(NA, nrow = n.iter, ncol = n.genes.trim)
pvals.samseq.nb <- matrix(NA, nrow = n.iter, ncol = n.genes.trim)
pvals.quasiseq.nb <- matrix(NA, nrow = n.iter, ncol = n.genes.trim)
pvals.quasiseq.nb.bart <- matrix(NA, nrow = n.iter, ncol = n.genes.trim)
pvals.edger.nb <- matrix(NA, nrow = n.iter, ncol = n.genes.trim)
pvals.deseq2.nb <- matrix(NA, nrow = n.iter, ncol = n.genes.trim)
pvals.voom.nb <- matrix(NA, nrow = n.iter, ncol = n.genes.trim)
### if sample size in simulated matrices is greater than or equal to
### 7, Cook's distance filtering replaces outlier counts which creates a new
### dataset so that another set of p-values is needed.
if(k.ind >= 7)
{
pvals.samseq.cooks.simseq <- vector("list", n.iter)
pvals.quasiseq.cooks.simseq <- vector("list", n.iter)
pvals.quasiseq.cooks.simseq.bart <- vector("list", n.iter)
pvals.edger.cooks.simseq <- vector("list", n.iter)
pvals.deseq2.cooks.simseq <- vector("list", n.iter)
pvals.voom.cooks.simseq <- vector("list", n.iter)
pvals.samseq.cooks.nb <- vector("list", n.iter)
pvals.quasiseq.cooks.nb <- vector("list", n.iter)
pvals.quasiseq.cooks.nb.bart <- vector("list", n.iter)
pvals.edger.cooks.nb <- vector("list", n.iter)
pvals.deseq2.cooks.nb <- vector("list", n.iter)
pvals.voom.cooks.nb <- vector("list", n.iter)
}
### Preprocessing steps for simulating NB data
lambdas <- matrix(NA, nrow = nrow(counts), ncol = 2)
sum.nf.nontumor <- sum(nf[tumor == "Non-Tumor"])
sum.nf.tumor <- sum(nf[tumor == "Tumor"])
lambdas[, 1] <- rowSums(counts[, tumor == "Non-Tumor"])/sum.nf.nontumor
lambdas[, 2] <- rowSums(counts[, tumor == "Tumor"])/sum.nf.tumor
### rnbinom simulates counts according to Var(Y) = mu + mu^2/size
### dispersions from edgeR given from model with Var(Y) = mu + mu^2 * size
nb.disp.tumor <- 1 / readRDS("nbdisp_tumor_edgeR.RDS")
nb.disp.nontumor <- 1 / readRDS("nbdisp_nontumor_edgeR.RDS")
### matrix where each row gives a logical vector for the Cook's distance filter
filt.cooks.simseq <- matrix(NA, nrow = n.iter, ncol = n.genes.trim)
filt.cooks.nb <- matrix(NA, nrow = n.iter, ncol = n.genes.trim)
i=1L
counts.simseq.list <- SimData(counts = counts, treatment = tumor, replic = replic,
sort.method = "paired", k.ind = k.ind, n.genes = n.genes,
n.diff = n.diff, norm.factors = nf, weights = wghts, switch.trt = TRUE)
counts.simseq <- counts.simseq.list$counts # Simulated Count matrix from SimSeq
genes.samp <- counts.simseq.list$genes.subset # Genes sampled from source matrix
de.genes <- counts.simseq.list$DE.genes # DE genes sampled from source matrix
ee.genes <- genes.samp[ ! (genes.samp %in% de.genes) ] # EE genes sampled from source matrix
samp.col <- counts.simseq.list$col # Columns sampled in SimSeq algorithm
de.genes.sim <- counts.simseq.list$genes.subset %in% de.genes # logical vector giving which genes are DE in simulted matrix
### Compute matrix of means for simulating from NB model
mu.samp <- matrix(NA, nrow = n.genes, ncol = 2 * k.ind)
nf.samp <- nf[samp.col]
### Use normalization factors from Tumor group to match SimSeq algorithm
mu.samp[de.genes.sim, 1:k.ind] <- lambdas[de.genes, 1, drop = FALSE] %*% nf.samp[ (k.ind + 1):(2 * k.ind) ]
mu.samp[de.genes.sim, (k.ind + 1):(2 * k.ind)] <- lambdas[de.genes, 2, drop = FALSE] %*% nf.samp[ (2 * k.ind + 1):(3 * k.ind) ]
mu.samp[ !de.genes.sim, ] <-  lambdas[ee.genes, 2, drop = FALSE] %*% nf.samp[ (k.ind + 1):(3 * k.ind) ]
### Set dispersion estimates
disp.samp <- matrix(NA, nrow = n.genes, ncol = 2)
disp.samp[!de.genes.sim, 1] <- disp.samp[!de.genes.sim, 2] <- nb.disp.tumor[ee.genes]
disp.samp[de.genes.sim, 1] <- nb.disp.nontumor[de.genes]
disp.samp[de.genes.sim, 2] <- nb.disp.tumor[de.genes]
### Simulate matrix of read counts from NB model
counts.nb <- matrix(NA, nrow = n.genes, ncol = 2 * k.ind)
for(jj in 1:n.genes){
counts.nb[jj, 1:k.ind] <- rnbinom(k.ind, size = disp.samp[jj, 1], mu = mu.samp[jj, 1:k.ind])
counts.nb[jj, -(1:k.ind)] <- rnbinom(k.ind, size = disp.samp[jj, 2], mu = mu.samp[jj, -(1:k.ind)])
}
### Apply filtering rules to both simulated datasets and only keep genes who pass both filters
keep.genes.simseq <- ( rowMeans(counts.simseq) >= filter.mean ) & ( rowSums(counts.simseq > 0) >= filter.nonzero )
keep.genes.nb <- ( rowMeans(counts.nb) >= filter.mean ) & ( rowSums(counts.nb > 0) >= filter.nonzero )
keep <- keep.genes.simseq & keep.genes.nb
ee.genes <- sample(which(!de.genes.sim & keep), n.genes.trim - n.diff.trim)
de.genes <- sample(which(de.genes.sim & keep), n.diff.trim)
counts.simseq <- counts.simseq[c(ee.genes, de.genes), ]
counts.nb <- counts.nb[c(ee.genes, de.genes), ]
design.list <- vector("list", 2)
trt <- c(rep(0, k.ind), rep(1, k.ind))
design.list[[1]] <- model.matrix(~trt)
design.list[[2]] <- rep(1, length(trt))
### Compute Normalization Factors
nf.simseq <- calcNormFactors(counts.simseq) * apply(counts.simseq, 2, sum)
nf.nb <- calcNormFactors(counts.nb) * apply(counts.nb, 2, sum)
### fit for SimSeq data
fit <- tryCatch(QL.fit(counts.simseq, design.list = design.list, log.offset = log(nf.simseq),
Model = "NegBin", method = "optim", print.progress = FALSE), error = function(w) NA)
args(QL.fit)
debug(QL.fit)
fit <- tryCatch(QL.fit(counts.simseq, design.list = design.list, log.offset = log(nf.simseq),
Model = "NegBin", method = "optim", print.progress = FALSE), error = function(w) NA)
args(estimateGLMTrendedDisp)
summary(res$bartlett.epsilon)
hist(log10(res$bartlett.epsilon)
)
tmp= res$bartlett.epsilon<1
hist(log10(res$bartlett.epsilon)[tmp])
hist((res$bartlett.epsilon)[tmp])
which(!tmp)
counts[which(!tmp),]
undebug(QL.fit)
if( !is.list(fit) ) next
res.fit <- QL.results(fit, Plot = FALSE)
pvals.quasiseq.simseq[i, ] <- res.fit$P.values$QL
fit.bart=fit
fit.bart$LRT = fit$LRT.Bart
res.fit.bart = QL.results(fit.bart, Plot = FALSE)
pvals.quasiseq.simseq.bart[i, ] <- res.fit.bart$P.values$QL
### fit for NB data
fit <- tryCatch(QL.fit(counts.nb, design.list = design.list, log.offset = log(nf.nb),
Model = "NegBin", method = "optim", print.progress = FALSE), error = function(w) NA)
